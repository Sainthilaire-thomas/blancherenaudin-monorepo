# Script PowerShell - D√©ploiement du webhook Stripe corrig√©
# Usage: .\deploy-stripe-webhook.ps1 -ProjectRoot "C:\path\to\project" -SourceFile "webhook-corrected.txt"

param(
    [Parameter(Mandatory=$true)]
    [string]$ProjectRoot,
    
    [Parameter(Mandatory=$false)]
    [string]$SourceFile = "webhook_stripe_route_ts_-_VERSION_CORRIG√âE_COMPL√àTE.txt",
    
    [Parameter(Mandatory=$false)]
    [switch]$Backup,
    
    [Parameter(Mandatory=$false)]
    [switch]$DryRun
)

Write-Host "`nüí≥ D√âPLOIEMENT WEBHOOK STRIPE CORRIG√â" -ForegroundColor Cyan
Write-Host "=" * 70 -ForegroundColor Gray

# V√©rifier que le projet existe
if (-not (Test-Path $ProjectRoot)) {
    Write-Host "‚ùå Erreur: Projet introuvable √† $ProjectRoot" -ForegroundColor Red
    exit 1
}

# Chemin du fichier source (version corrig√©e)
if (-not (Test-Path $SourceFile)) {
    Write-Host "‚ùå Erreur: Fichier source introuvable: $SourceFile" -ForegroundColor Red
    Write-Host "   Assurez-vous que le fichier 'webhook_stripe_route_ts_-_VERSION_CORRIG√âE_COMPL√àTE.txt' est pr√©sent" -ForegroundColor Yellow
    exit 1
}

# Chemin de destination
$destPath = Join-Path $ProjectRoot "apps\storefront\app\api\webhooks\stripe\route.ts"
$destDir = Split-Path -Parent $destPath

Write-Host "`nüìã Configuration:" -ForegroundColor Yellow
Write-Host "   Source: $SourceFile" -ForegroundColor Gray
Write-Host "   Dest:   $destPath" -ForegroundColor Gray
if ($Backup) {
    Write-Host "   Backup: Activ√©" -ForegroundColor Green
}
if ($DryRun) {
    Write-Host "   Mode:   DRY RUN (simulation)" -ForegroundColor Yellow
}
Write-Host ""

# Lire le contenu du fichier source
$content = Get-Content -Path $SourceFile -Raw

# Analyser le contenu
Write-Host "`nüîç ANALYSE DU FICHIER SOURCE" -ForegroundColor Yellow
Write-Host "-" * 70 -ForegroundColor Gray

$lines = (Get-Content -Path $SourceFile).Count
Write-Host "   üìè Lignes: $lines" -ForegroundColor Cyan

# V√©rifier les imports critiques
$hasStripe = $content -match "from '@/lib/stripe'|from 'stripe'"
$hasSupabase = $content -match "from '@/lib/supabase-admin'"
$hasEmail = $content -match "from '@/lib/email/send-order-confirmation-hook'"
$hasStock = $content -match "from '@/lib/stock/decrement-stock'"

Write-Host "   üì¶ D√©pendances d√©tect√©es:" -ForegroundColor Cyan
Write-Host "      ‚Ä¢ Stripe: $(if ($hasStripe) { '‚úÖ' } else { '‚ùå' })" -ForegroundColor $(if ($hasStripe) { "Green" } else { "Red" })
Write-Host "      ‚Ä¢ Supabase Admin: $(if ($hasSupabase) { '‚úÖ' } else { '‚ùå' })" -ForegroundColor $(if ($hasSupabase) { "Green" } else { "Red" })
Write-Host "      ‚Ä¢ Email Hook: $(if ($hasEmail) { '‚úÖ' } else { '‚ùå' })" -ForegroundColor $(if ($hasEmail) { "Green" } else { "Red" })
Write-Host "      ‚Ä¢ Stock Decrement: $(if ($hasStock) { '‚úÖ' } else { '‚ùå' })" -ForegroundColor $(if ($hasStock) { "Green" } else { "Red" })

# V√©rifier les fonctions principales
$functions = @(
    "handleCheckoutSessionCompleted",
    "handlePaymentIntentSucceeded",
    "handlePaymentIntentFailed",
    "createOrderItemsFromSession",
    "parseAddress",
    "sendConfirmationEmailSafe"
)

Write-Host "`n   üîß Fonctions impl√©ment√©es:" -ForegroundColor Cyan
foreach ($func in $functions) {
    $exists = $content -match "function\s+$func|const\s+$func\s*="
    Write-Host "      ‚Ä¢ $func : $(if ($exists) { '‚úÖ' } else { '‚ùå' })" -ForegroundColor $(if ($exists) { "Green" } else { "Red" })
}

# V√©rifier le gestionnaire POST
$hasPOST = $content -match "export\s+async\s+function\s+POST"
Write-Host "`n   üåê Export POST: $(if ($hasPOST) { '‚úÖ' } else { '‚ùå' })" -ForegroundColor $(if ($hasPOST) { "Green" } else { "Red" })

# Transformation des imports pour le monorepo
Write-Host "`nüîÑ TRANSFORMATION DES IMPORTS" -ForegroundColor Yellow
Write-Host "-" * 70 -ForegroundColor Gray

$updatedContent = $content

# Mapping des imports
$importMappings = @{
    "from '@/lib/stripe'" = "from '@repo/database/server'"
    "from '@/lib/supabase-admin'" = "from '@repo/database/server'"
    "from '@/lib/email/send-order-confirmation-hook'" = "from '@repo/email'"
    "from '@/lib/stock/decrement-stock'" = "from '@repo/database/server'"
}

$transformCount = 0
foreach ($oldImport in $importMappings.Keys) {
    $newImport = $importMappings[$oldImport]
    if ($content -match [regex]::Escape($oldImport)) {
        Write-Host "   ‚úèÔ∏è  $oldImport" -ForegroundColor Red
        Write-Host "      ‚Üí $newImport" -ForegroundColor Green
        $updatedContent = $updatedContent -replace [regex]::Escape($oldImport), $newImport
        $transformCount++
    }
}

if ($transformCount -eq 0) {
    Write-Host "   ‚ÑπÔ∏è  Aucun import √† transformer (d√©j√† au bon format?)" -ForegroundColor Yellow
} else {
    Write-Host "`n   ‚úÖ $transformCount imports transform√©s" -ForegroundColor Green
}

# V√©rifier si le fichier destination existe
if (Test-Path $destPath) {
    Write-Host "`n‚ö†Ô∏è  FICHIER EXISTANT D√âTECT√â" -ForegroundColor Yellow
    Write-Host "-" * 70 -ForegroundColor Gray
    
    $existingContent = Get-Content -Path $destPath -Raw
    $existingLines = (Get-Content -Path $destPath).Count
    
    Write-Host "   üìÑ Fichier actuel: $existingLines lignes" -ForegroundColor Cyan
    Write-Host "   üìÑ Nouvelle version: $lines lignes" -ForegroundColor Cyan
    
    # Comparer les contenus
    if ($existingContent.Trim() -eq $updatedContent.Trim()) {
        Write-Host "`n   ‚ÑπÔ∏è  Les fichiers sont identiques, aucune action n√©cessaire" -ForegroundColor Green
        exit 0
    }
}

if ($DryRun) {
    Write-Host "`nüîç DRY RUN - Aper√ßu des changements:" -ForegroundColor Yellow
    Write-Host "-" * 70 -ForegroundColor Gray
    Write-Host "`n   Le fichier SERAIT cr√©√©/mis √† jour avec:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ $lines lignes de code" -ForegroundColor White
    Write-Host "   ‚Ä¢ $transformCount imports transform√©s" -ForegroundColor White
    Write-Host "   ‚Ä¢ $(($functions | Where-Object { $content -match $_ }).Count) fonctions" -ForegroundColor White
    
    Write-Host "`n   Pour appliquer les changements, relancez sans -DryRun" -ForegroundColor Yellow
    exit 0
}

# Backup si demand√©
if ($Backup -and (Test-Path $destPath)) {
    $backupPath = "$destPath.backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    Write-Host "`nüíæ BACKUP" -ForegroundColor Yellow
    Write-Host "   Sauvegarde: $backupPath" -ForegroundColor Gray
    Copy-Item -Path $destPath -Destination $backupPath
    Write-Host "   ‚úÖ Backup cr√©√©" -ForegroundColor Green
}

# Cr√©er le dossier si n√©cessaire
if (-not (Test-Path $destDir)) {
    Write-Host "`nüìÅ Cr√©ation du dossier: $destDir" -ForegroundColor Cyan
    New-Item -ItemType Directory -Path $destDir -Force | Out-Null
}

# √âcrire le fichier
Write-Host "`nüíæ √âCRITURE DU FICHIER" -ForegroundColor Yellow
Write-Host "-" * 70 -ForegroundColor Gray

Set-Content -Path $destPath -Value $updatedContent -Encoding UTF8
Write-Host "   ‚úÖ Fichier webhook d√©ploy√© avec succ√®s!" -ForegroundColor Green

# V√©rifications post-d√©ploiement
Write-Host "`n‚úÖ V√âRIFICATIONS POST-D√âPLOIEMENT" -ForegroundColor Yellow
Write-Host "-" * 70 -ForegroundColor Gray

$deployed = Get-Content -Path $destPath -Raw
$deployedLines = (Get-Content -Path $destPath).Count

Write-Host "   üìè Lignes √©crites: $deployedLines" -ForegroundColor Cyan
Write-Host "   üì¶ Taille: $([math]::Round((Get-Item $destPath).Length / 1KB, 2)) KB" -ForegroundColor Cyan

# V√©rifier que les imports critiques sont pr√©sents
$checkImports = @(
    "@repo/database/server",
    "@repo/email"
)

Write-Host "`n   üîç V√©rification des imports critiques:" -ForegroundColor Cyan
foreach ($imp in $checkImports) {
    $found = $deployed -match [regex]::Escape($imp)
    Write-Host "      ‚Ä¢ $imp : $(if ($found) { '‚úÖ' } else { '‚ùå' })" -ForegroundColor $(if ($found) { "Green" } else { "Red" })
}

# Prochaines √©tapes
Write-Host "`n`nüìù PROCHAINES √âTAPES" -ForegroundColor Yellow
Write-Host "-" * 70 -ForegroundColor Gray

Write-Host "`n1Ô∏è‚É£  V√©rifier la compilation TypeScript:"
Write-Host "   cd apps\storefront" -ForegroundColor Cyan
Write-Host "   pnpm tsc --noEmit" -ForegroundColor Cyan

Write-Host "`n2Ô∏è‚É£  Lancer le serveur de d√©veloppement:"
Write-Host "   pnpm dev" -ForegroundColor Cyan

Write-Host "`n3Ô∏è‚É£  Tester le webhook avec Stripe CLI (dans un autre terminal):"
Write-Host "   stripe listen --forward-to localhost:3000/api/webhooks/stripe" -ForegroundColor Cyan
Write-Host "   stripe trigger checkout.session.completed" -ForegroundColor Cyan

Write-Host "`n4Ô∏è‚É£  V√©rifier les d√©pendances dans @repo/email:"
Write-Host "   ‚Ä¢ sendOrderConfirmationHook doit √™tre export√©" -ForegroundColor White
Write-Host "   ‚Ä¢ V√©rifier packages/email/src/index.ts" -ForegroundColor White

Write-Host "`n5Ô∏è‚É£  V√©rifier les d√©pendances dans @repo/database:"
Write-Host "   ‚Ä¢ stripe, supabaseAdmin doivent √™tre export√©s" -ForegroundColor White
Write-Host "   ‚Ä¢ decrementStockForOrder doit √™tre export√©" -ForegroundColor White
Write-Host "   ‚Ä¢ V√©rifier packages/database/src/server.ts" -ForegroundColor White

Write-Host "`n‚ú® D√©ploiement termin√©!`n" -ForegroundColor Cyan
